// original Copyright (c) Damien Guard.  All rights reserved.
// Modifications by Jessica Mulein
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
// Originally published at http://damieng.com/blog/2007/11/19/calculating-crc-64-in-c-and-net
// https://raw.githubusercontent.com/damieng/DamienGKit/master/CSharp/DamienG.Library/Security/Cryptography/Crc64.cs

using System.Security.Cryptography;

namespace PhantomKit.Helpers;

/// <summary>
///     Implements a 64-bit CRC hash algorithm for a given polynomial.
/// </summary>
/// <remarks>
///     For ISO 3309 compliant 64-bit CRC's use Crc64Iso.
/// </remarks>
public class Crc64 : HashAlgorithm
{
    protected const ulong DefaultSeed = 0x0;


    /// <summary>
    ///     The ISO polynomial, defined in ISO 3309 and used in HDLC.
    /// </summary>
    public const ulong Iso3309Polynomial = 0xD800000000000000;


    /// <summary>
    ///     The ECMA polynomial, defined in ECMA 182.
    /// </summary>
    public const ulong EcmaPolynomial = 0xC96C5795D7870F42;

    public static readonly ulong[] Iso3309Table =
    {
        0x0000000000000000UL, 0x01B0000000000000UL, 0x0360000000000000UL, 0x02D0000000000000UL,
        0x06C0000000000000UL, 0x0770000000000000UL, 0x05A0000000000000UL, 0x0410000000000000UL,
        0x0D80000000000000UL, 0x0C30000000000000UL, 0x0EE0000000000000UL, 0x0F50000000000000UL,
        0x0B40000000000000UL, 0x0AF0000000000000UL, 0x0820000000000000UL, 0x0990000000000000UL,
        0x1B00000000000000UL, 0x1AB0000000000000UL, 0x1860000000000000UL, 0x19D0000000000000UL,
        0x1DC0000000000000UL, 0x1C70000000000000UL, 0x1EA0000000000000UL, 0x1F10000000000000UL,
        0x1680000000000000UL, 0x1730000000000000UL, 0x15E0000000000000UL, 0x1450000000000000UL,
        0x1040000000000000UL, 0x11F0000000000000UL, 0x1320000000000000UL, 0x1290000000000000UL,
        0x3600000000000000UL, 0x37B0000000000000UL, 0x3560000000000000UL, 0x34D0000000000000UL,
        0x30C0000000000000UL, 0x3170000000000000UL, 0x33A0000000000000UL, 0x3210000000000000UL,
        0x3B80000000000000UL, 0x3A30000000000000UL, 0x38E0000000000000UL, 0x3950000000000000UL,
        0x3D40000000000000UL, 0x3CF0000000000000UL, 0x3E20000000000000UL, 0x3F90000000000000UL,
        0x2D00000000000000UL, 0x2CB0000000000000UL, 0x2E60000000000000UL, 0x2FD0000000000000UL,
        0x2BC0000000000000UL, 0x2A70000000000000UL, 0x28A0000000000000UL, 0x2910000000000000UL,
        0x2080000000000000UL, 0x2130000000000000UL, 0x23E0000000000000UL, 0x2250000000000000UL,
        0x2640000000000000UL, 0x27F0000000000000UL, 0x2520000000000000UL, 0x2490000000000000UL,
        0x6C00000000000000UL, 0x6DB0000000000000UL, 0x6F60000000000000UL, 0x6ED0000000000000UL,
        0x6AC0000000000000UL, 0x6B70000000000000UL, 0x69A0000000000000UL, 0x6810000000000000UL,
        0x6180000000000000UL, 0x6030000000000000UL, 0x62E0000000000000UL, 0x6350000000000000UL,
        0x6740000000000000UL, 0x66F0000000000000UL, 0x6420000000000000UL, 0x6590000000000000UL,
        0x7700000000000000UL, 0x76B0000000000000UL, 0x7460000000000000UL, 0x75D0000000000000UL,
        0x71C0000000000000UL, 0x7070000000000000UL, 0x72A0000000000000UL, 0x7310000000000000UL,
        0x7A80000000000000UL, 0x7B30000000000000UL, 0x79E0000000000000UL, 0x7850000000000000UL,
        0x7C40000000000000UL, 0x7DF0000000000000UL, 0x7F20000000000000UL, 0x7E90000000000000UL,
        0x5A00000000000000UL, 0x5BB0000000000000UL, 0x5960000000000000UL, 0x58D0000000000000UL,
        0x5CC0000000000000UL, 0x5D70000000000000UL, 0x5FA0000000000000UL, 0x5E10000000000000UL,
        0x5780000000000000UL, 0x5630000000000000UL, 0x54E0000000000000UL, 0x5550000000000000UL,
        0x5140000000000000UL, 0x50F0000000000000UL, 0x5220000000000000UL, 0x5390000000000000UL,
        0x4100000000000000UL, 0x40B0000000000000UL, 0x4260000000000000UL, 0x43D0000000000000UL,
        0x47C0000000000000UL, 0x4670000000000000UL, 0x44A0000000000000UL, 0x4510000000000000UL,
        0x4C80000000000000UL, 0x4D30000000000000UL, 0x4FE0000000000000UL, 0x4E50000000000000UL,
        0x4A40000000000000UL, 0x4BF0000000000000UL, 0x4920000000000000UL, 0x4890000000000000UL,
        0xD800000000000000UL, 0xD9B0000000000000UL, 0xDB60000000000000UL, 0xDAD0000000000000UL,
        0xDEC0000000000000UL, 0xDF70000000000000UL, 0xDDA0000000000000UL, 0xDC10000000000000UL,
        0xD580000000000000UL, 0xD430000000000000UL, 0xD6E0000000000000UL, 0xD750000000000000UL,
        0xD340000000000000UL, 0xD2F0000000000000UL, 0xD020000000000000UL, 0xD190000000000000UL,
        0xC300000000000000UL, 0xC2B0000000000000UL, 0xC060000000000000UL, 0xC1D0000000000000UL,
        0xC5C0000000000000UL, 0xC470000000000000UL, 0xC6A0000000000000UL, 0xC710000000000000UL,
        0xCE80000000000000UL, 0xCF30000000000000UL, 0xCDE0000000000000UL, 0xCC50000000000000UL,
        0xC840000000000000UL, 0xC9F0000000000000UL, 0xCB20000000000000UL, 0xCA90000000000000UL,
        0xEE00000000000000UL, 0xEFB0000000000000UL, 0xED60000000000000UL, 0xECD0000000000000UL,
        0xE8C0000000000000UL, 0xE970000000000000UL, 0xEBA0000000000000UL, 0xEA10000000000000UL,
        0xE380000000000000UL, 0xE230000000000000UL, 0xE0E0000000000000UL, 0xE150000000000000UL,
        0xE540000000000000UL, 0xE4F0000000000000UL, 0xE620000000000000UL, 0xE790000000000000UL,
        0xF500000000000000UL, 0xF4B0000000000000UL, 0xF660000000000000UL, 0xF7D0000000000000UL,
        0xF3C0000000000000UL, 0xF270000000000000UL, 0xF0A0000000000000UL, 0xF110000000000000UL,
        0xF880000000000000UL, 0xF930000000000000UL, 0xFBE0000000000000UL, 0xFA50000000000000UL,
        0xFE40000000000000UL, 0xFFF0000000000000UL, 0xFD20000000000000UL, 0xFC90000000000000UL,
        0xB400000000000000UL, 0xB5B0000000000000UL, 0xB760000000000000UL, 0xB6D0000000000000UL,
        0xB2C0000000000000UL, 0xB370000000000000UL, 0xB1A0000000000000UL, 0xB010000000000000UL,
        0xB980000000000000UL, 0xB830000000000000UL, 0xBAE0000000000000UL, 0xBB50000000000000UL,
        0xBF40000000000000UL, 0xBEF0000000000000UL, 0xBC20000000000000UL, 0xBD90000000000000UL,
        0xAF00000000000000UL, 0xAEB0000000000000UL, 0xAC60000000000000UL, 0xADD0000000000000UL,
        0xA9C0000000000000UL, 0xA870000000000000UL, 0xAAA0000000000000UL, 0xAB10000000000000UL,
        0xA280000000000000UL, 0xA330000000000000UL, 0xA1E0000000000000UL, 0xA050000000000000UL,
        0xA440000000000000UL, 0xA5F0000000000000UL, 0xA720000000000000UL, 0xA690000000000000UL,
        0x8200000000000000UL, 0x83B0000000000000UL, 0x8160000000000000UL, 0x80D0000000000000UL,
        0x84C0000000000000UL, 0x8570000000000000UL, 0x87A0000000000000UL, 0x8610000000000000UL,
        0x8F80000000000000UL, 0x8E30000000000000UL, 0x8CE0000000000000UL, 0x8D50000000000000UL,
        0x8940000000000000UL, 0x88F0000000000000UL, 0x8A20000000000000UL, 0x8B90000000000000UL,
        0x9900000000000000UL, 0x98B0000000000000UL, 0x9A60000000000000UL, 0x9BD0000000000000UL,
        0x9FC0000000000000UL, 0x9E70000000000000UL, 0x9CA0000000000000UL, 0x9D10000000000000UL,
        0x9480000000000000UL, 0x9530000000000000UL, 0x97E0000000000000UL, 0x9650000000000000UL,
        0x9240000000000000UL, 0x93F0000000000000UL, 0x9120000000000000UL, 0x9090000000000000UL,
    };

    public static readonly ulong[] EcmaTable =
    {
        0x0000000000000000UL, 0xB32E4CBE03A75F6FUL, 0xF4843657A840A05BUL, 0x47AA7AE9ABE7FF34UL,
        0x7BD0C384FF8F5E33UL, 0xC8FE8F3AFC28015CUL, 0x8F54F5D357CFFE68UL, 0x3C7AB96D5468A107UL,
        0xF7A18709FF1EBC66UL, 0x448FCBB7FCB9E309UL, 0x0325B15E575E1C3DUL, 0xB00BFDE054F94352UL,
        0x8C71448D0091E255UL, 0x3F5F08330336BD3AUL, 0x78F572DAA8D1420EUL, 0xCBDB3E64AB761D61UL,
        0x7D9BA13851336649UL, 0xCEB5ED8652943926UL, 0x891F976FF973C612UL, 0x3A31DBD1FAD4997DUL,
        0x064B62BCAEBC387AUL, 0xB5652E02AD1B6715UL, 0xF2CF54EB06FC9821UL, 0x41E11855055BC74EUL,
        0x8A3A2631AE2DDA2FUL, 0x39146A8FAD8A8540UL, 0x7EBE1066066D7A74UL, 0xCD905CD805CA251BUL,
        0xF1EAE5B551A2841CUL, 0x42C4A90B5205DB73UL, 0x056ED3E2F9E22447UL, 0xB6409F5CFA457B28UL,
        0xFB374270A266CC92UL, 0x48190ECEA1C193FDUL, 0x0FB374270A266CC9UL, 0xBC9D3899098133A6UL,
        0x80E781F45DE992A1UL, 0x33C9CD4A5E4ECDCEUL, 0x7463B7A3F5A932FAUL, 0xC74DFB1DF60E6D95UL,
        0x0C96C5795D7870F4UL, 0xBFB889C75EDF2F9BUL, 0xF812F32EF538D0AFUL, 0x4B3CBF90F69F8FC0UL,
        0x774606FDA2F72EC7UL, 0xC4684A43A15071A8UL, 0x83C230AA0AB78E9CUL, 0x30EC7C140910D1F3UL,
        0x86ACE348F355AADBUL, 0x3582AFF6F0F2F5B4UL, 0x7228D51F5B150A80UL, 0xC10699A158B255EFUL,
        0xFD7C20CC0CDAF4E8UL, 0x4E526C720F7DAB87UL, 0x09F8169BA49A54B3UL, 0xBAD65A25A73D0BDCUL,
        0x710D64410C4B16BDUL, 0xC22328FF0FEC49D2UL, 0x85895216A40BB6E6UL, 0x36A71EA8A7ACE989UL,
        0x0ADDA7C5F3C4488EUL, 0xB9F3EB7BF06317E1UL, 0xFE5991925B84E8D5UL, 0x4D77DD2C5823B7BAUL,
        0x64B62BCAEBC387A1UL, 0xD7986774E864D8CEUL, 0x90321D9D438327FAUL, 0x231C512340247895UL,
        0x1F66E84E144CD992UL, 0xAC48A4F017EB86FDUL, 0xEBE2DE19BC0C79C9UL, 0x58CC92A7BFAB26A6UL,
        0x9317ACC314DD3BC7UL, 0x2039E07D177A64A8UL, 0x67939A94BC9D9B9CUL, 0xD4BDD62ABF3AC4F3UL,
        0xE8C76F47EB5265F4UL, 0x5BE923F9E8F53A9BUL, 0x1C4359104312C5AFUL, 0xAF6D15AE40B59AC0UL,
        0x192D8AF2BAF0E1E8UL, 0xAA03C64CB957BE87UL, 0xEDA9BCA512B041B3UL, 0x5E87F01B11171EDCUL,
        0x62FD4976457FBFDBUL, 0xD1D305C846D8E0B4UL, 0x96797F21ED3F1F80UL, 0x2557339FEE9840EFUL,
        0xEE8C0DFB45EE5D8EUL, 0x5DA24145464902E1UL, 0x1A083BACEDAEFDD5UL, 0xA9267712EE09A2BAUL,
        0x955CCE7FBA6103BDUL, 0x267282C1B9C65CD2UL, 0x61D8F8281221A3E6UL, 0xD2F6B4961186FC89UL,
        0x9F8169BA49A54B33UL, 0x2CAF25044A02145CUL, 0x6B055FEDE1E5EB68UL, 0xD82B1353E242B407UL,
        0xE451AA3EB62A1500UL, 0x577FE680B58D4A6FUL, 0x10D59C691E6AB55BUL, 0xA3FBD0D71DCDEA34UL,
        0x6820EEB3B6BBF755UL, 0xDB0EA20DB51CA83AUL, 0x9CA4D8E41EFB570EUL, 0x2F8A945A1D5C0861UL,
        0x13F02D374934A966UL, 0xA0DE61894A93F609UL, 0xE7741B60E174093DUL, 0x545A57DEE2D35652UL,
        0xE21AC88218962D7AUL, 0x5134843C1B317215UL, 0x169EFED5B0D68D21UL, 0xA5B0B26BB371D24EUL,
        0x99CA0B06E7197349UL, 0x2AE447B8E4BE2C26UL, 0x6D4E3D514F59D312UL, 0xDE6071EF4CFE8C7DUL,
        0x15BB4F8BE788911CUL, 0xA6950335E42FCE73UL, 0xE13F79DC4FC83147UL, 0x521135624C6F6E28UL,
        0x6E6B8C0F1807CF2FUL, 0xDD45C0B11BA09040UL, 0x9AEFBA58B0476F74UL, 0x29C1F6E6B3E0301BUL,
        0xC96C5795D7870F42UL, 0x7A421B2BD420502DUL, 0x3DE861C27FC7AF19UL, 0x8EC62D7C7C60F076UL,
        0xB2BC941128085171UL, 0x0192D8AF2BAF0E1EUL, 0x4638A2468048F12AUL, 0xF516EEF883EFAE45UL,
        0x3ECDD09C2899B324UL, 0x8DE39C222B3EEC4BUL, 0xCA49E6CB80D9137FUL, 0x7967AA75837E4C10UL,
        0x451D1318D716ED17UL, 0xF6335FA6D4B1B278UL, 0xB199254F7F564D4CUL, 0x02B769F17CF11223UL,
        0xB4F7F6AD86B4690BUL, 0x07D9BA1385133664UL, 0x4073C0FA2EF4C950UL, 0xF35D8C442D53963FUL,
        0xCF273529793B3738UL, 0x7C0979977A9C6857UL, 0x3BA3037ED17B9763UL, 0x888D4FC0D2DCC80CUL,
        0x435671A479AAD56DUL, 0xF0783D1A7A0D8A02UL, 0xB7D247F3D1EA7536UL, 0x04FC0B4DD24D2A59UL,
        0x3886B22086258B5EUL, 0x8BA8FE9E8582D431UL, 0xCC0284772E652B05UL, 0x7F2CC8C92DC2746AUL,
        0x325B15E575E1C3D0UL, 0x8175595B76469CBFUL, 0xC6DF23B2DDA1638BUL, 0x75F16F0CDE063CE4UL,
        0x498BD6618A6E9DE3UL, 0xFAA59ADF89C9C28CUL, 0xBD0FE036222E3DB8UL, 0x0E21AC88218962D7UL,
        0xC5FA92EC8AFF7FB6UL, 0x76D4DE52895820D9UL, 0x317EA4BB22BFDFEDUL, 0x8250E80521188082UL,
        0xBE2A516875702185UL, 0x0D041DD676D77EEAUL, 0x4AAE673FDD3081DEUL, 0xF9802B81DE97DEB1UL,
        0x4FC0B4DD24D2A599UL, 0xFCEEF8632775FAF6UL, 0xBB44828A8C9205C2UL, 0x086ACE348F355AADUL,
        0x34107759DB5DFBAAUL, 0x873E3BE7D8FAA4C5UL, 0xC094410E731D5BF1UL, 0x73BA0DB070BA049EUL,
        0xB86133D4DBCC19FFUL, 0x0B4F7F6AD86B4690UL, 0x4CE50583738CB9A4UL, 0xFFCB493D702BE6CBUL,
        0xC3B1F050244347CCUL, 0x709FBCEE27E418A3UL, 0x3735C6078C03E797UL, 0x841B8AB98FA4B8F8UL,
        0xADDA7C5F3C4488E3UL, 0x1EF430E13FE3D78CUL, 0x595E4A08940428B8UL, 0xEA7006B697A377D7UL,
        0xD60ABFDBC3CBD6D0UL, 0x6524F365C06C89BFUL, 0x228E898C6B8B768BUL, 0x91A0C532682C29E4UL,
        0x5A7BFB56C35A3485UL, 0xE955B7E8C0FD6BEAUL, 0xAEFFCD016B1A94DEUL, 0x1DD181BF68BDCBB1UL,
        0x21AB38D23CD56AB6UL, 0x9285746C3F7235D9UL, 0xD52F0E859495CAEDUL, 0x6601423B97329582UL,
        0xD041DD676D77EEAAUL, 0x636F91D96ED0B1C5UL, 0x24C5EB30C5374EF1UL, 0x97EBA78EC690119EUL,
        0xAB911EE392F8B099UL, 0x18BF525D915FEFF6UL, 0x5F1528B43AB810C2UL, 0xEC3B640A391F4FADUL,
        0x27E05A6E926952CCUL, 0x94CE16D091CE0DA3UL, 0xD3646C393A29F297UL, 0x604A2087398EADF8UL,
        0x5C3099EA6DE60CFFUL, 0xEF1ED5546E415390UL, 0xA8B4AFBDC5A6ACA4UL, 0x1B9AE303C601F3CBUL,
        0x56ED3E2F9E224471UL, 0xE5C372919D851B1EUL, 0xA26908783662E42AUL, 0x114744C635C5BB45UL,
        0x2D3DFDAB61AD1A42UL, 0x9E13B115620A452DUL, 0xD9B9CBFCC9EDBA19UL, 0x6A978742CA4AE576UL,
        0xA14CB926613CF817UL, 0x1262F598629BA778UL, 0x55C88F71C97C584CUL, 0xE6E6C3CFCADB0723UL,
        0xDA9C7AA29EB3A624UL, 0x69B2361C9D14F94BUL, 0x2E184CF536F3067FUL, 0x9D36004B35545910UL,
        0x2B769F17CF112238UL, 0x9858D3A9CCB67D57UL, 0xDFF2A94067518263UL, 0x6CDCE5FE64F6DD0CUL,
        0x50A65C93309E7C0BUL, 0xE388102D33392364UL, 0xA4226AC498DEDC50UL, 0x170C267A9B79833FUL,
        0xDCD7181E300F9E5EUL, 0x6FF954A033A8C131UL, 0x28532E49984F3E05UL, 0x9B7D62F79BE8616AUL,
        0xA707DB9ACF80C06DUL, 0x14299724CC279F02UL, 0x5383EDCD67C06036UL, 0xE0ADA17364673F59UL,
    };

    private readonly ulong _seed;
    private readonly ulong[] _table;
    private ulong _hashUlong;

    public Crc64(ulong? polynomial = null, ulong? seed = null, ulong[]? table = null)
    {
        if (!BitConverter.IsLittleEndian)
            throw new PlatformNotSupportedException(message: "Not supported on Big Endian processors");

        this._table = table ?? CreateTable(polynomial: polynomial ?? Iso3309Polynomial);
        this._seed = this._hashUlong = seed ?? DefaultSeed;
    }

    public override int HashSize => 64;

    public override void Initialize()
    {
        this._hashUlong = this._seed;
    }

    protected override void HashCore(byte[] array, int ibStart, int cbSize)
    {
        this._hashUlong = ComputeChecksum(seed: this._hashUlong,
            table: this._table,
            bytes: array,
            start: ibStart,
            size: cbSize);
    }

    protected override byte[] HashFinal()
    {
        var hashBuffer = UInt64ToBigEndianBytes(value: this._hashUlong);
        this.HashValue = hashBuffer;
        return hashBuffer;
    }

    public ulong ComputeChecksum(IEnumerable<byte> bytes, int start = 0, int size = -1)
    {
        var hash = this._seed;
        var enumerable = bytes.ToArray();
        size = size == -1 ? enumerable.Length : size;
        for (var i = start; i < start + size; i++) hash = (hash >> 8) ^ this._table![(enumerable[i] ^ hash) & 0xff];

        return hash;
    }

    public static ulong ComputeChecksum(IEnumerable<byte>? bytes, ulong? polynomial = null, ulong? seed = null,
        ulong[]? table = null,
        int start = 0, int size = -1)
    {
        return new Crc64(
            polynomial: polynomial,
            seed: seed,
            table: table).ComputeChecksum(bytes: bytes ?? Array.Empty<byte>(),
            start: start,
            size: size);
    }

    public static IEnumerable<byte> ComputeChecksumBytes(IEnumerable<byte> bytes)
    {
        return BitConverter.GetBytes(value: new Crc64().ComputeChecksum(bytes: bytes));
    }

    private static byte[] UInt64ToBigEndianBytes(ulong value)
    {
        var result = BitConverter.GetBytes(value: value);

        if (BitConverter.IsLittleEndian) Array.Reverse(array: result);

        return result;
    }

    public static ulong[] CreateTable(ulong polynomial)
    {
        var createTable = new ulong[256];
        for (var i = 0; i < 256; ++i)
        {
            var entry = (ulong) i;
            for (var j = 0; j < 8; ++j)
                if ((entry & 1) == 1)
                    entry = (entry >> 1) ^ polynomial;
                else
                    entry >>= 1;

            createTable[i] = entry;
        }

        return createTable;
    }
}